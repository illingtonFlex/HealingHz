var HealingHz = HealingHz || {};

HealingHz.createNS = function (namespace) {
    var nsparts = namespace.split(".");
    var parent = HealingHz;
 
    if (nsparts[0] === "HealingHz") {
        nsparts = nsparts.slice(1);
    }
 
    for (var i = 0; i < nsparts.length; i++) {
        var partname = nsparts[i];

        if (typeof parent[partname] === "undefined") {
            parent[partname] = {};
        }

        parent = parent[partname];
    }

    return parent;
};



HealingHz.showVictoryText = function() {
    var modal = document.getElementById('victoryDiv');
    modal.style.display = "block";
};

HealingHz.showFailureText = function() {
    var modal = document.getElementById('failureDiv');
    modal.style.display = "block";
};

HealingHz.checkNoteOrder = function() {
                
    var ret = true;
    var index = 0;

    for(checki=0; checki<HealingHz.NUM_MARKERS; checki++) {
    
        if(!HealingHz.markerBoxes[checki].isFull()) {
            return false;
        } 
        
        var note = HealingHz.markerBoxes[checki].getNote();        
        
        if(index <= note.index) {
            index = note.index;
        }
        else {
            ret = false;
        }
    }
    
    if(ret === true) {
        HealingHz.showVictoryText();
    }
    else {
        HealingHz.showFailureText();
    }
    
    return ret;
};

HealingHz.initAudio = function(chord) {
    console.log("Initializing chord: " + chord.name); 
    var notes = chord.getNotes();
    
    var audioPath = "audio/" + ((Math.floor(Math.random() * 4) + 1))  + "/";
    console.log("audiopath: " + audioPath);
    var sounds = [];
    
    for(var i = 0; i<notes.length; i++)
    {
        var pushNote = notes[i];
        sounds.push({id:pushNote.name, src:pushNote.name+".ogg"});
    }

    createjs.Sound.alternateExtensions = ["mp3", "wav"];
    createjs.Sound.registerSounds(sounds, audioPath);

};

HealingHz.init = function() {
    var model = HealingHz.model;   
    var data = HealingHz.data;

//    HealingHz.NUM_MARKERS = 3; //(Math.floor(Math.random() * 3) + 1) + 2;

    var stage = new createjs.Stage("healingHzCanvas");
    createjs.Touch.enable(stage);
    
    var chordFactory = new data.ChordFactory();
    var theChord = chordFactory.getChord();
    HealingHz.NUM_MARKERS = theChord.getNotes().length;

    HealingHz.initAudio(theChord);

    var factory = new model.NoteMarkerFactory();
    HealingHz.noteMarkers = factory.buildNoteMarkers(theChord);
    HealingHz.markerBoxes = [];

    
    for(i=0; i<HealingHz.noteMarkers.length; i++)
    {
        HealingHz.noteMarkers[i].draw(stage);
    }

    for(i=0; i<HealingHz.NUM_MARKERS; i++)
    {
        var xindex = (690+(10*i))/HealingHz.NUM_MARKERS + (110*i);
        
        HealingHz.markerBoxes.push(
            new HealingHz.model.NoteMarkerBox(
                xindex, 50, "white", "black"));
        HealingHz.markerBoxes[i].draw(stage);
    }
};

window.onload = function() {
    HealingHz.init();
};
var ns = HealingHz.createNS("HealingHz.data");

ns.Chord = function(name, notes) {
    this.name = name;
    this.notes = notes;
};

ns.Chord.prototype.getName = function() {
    return this.name;
};

ns.Chord.prototype.getNotes = function() {
    return this.notes;
};
var ns = HealingHz.createNS("HealingHz.data");

ns.ChordFactory = function() {

    this.C4  = new HealingHz.data.Note("C",    0);
    this.Db4 = new HealingHz.data.Note("CsharpDflat", 1);
    this.D4  = new HealingHz.data.Note("D",    2);
    this.Eb4 = new HealingHz.data.Note("DsharpEflat", 3);
    this.E4  = new HealingHz.data.Note("E",    4);
    this.F4  = new HealingHz.data.Note("F",    5);
    this.Gb4 = new HealingHz.data.Note("FsharpGflat", 6);
    this.G4  = new HealingHz.data.Note("G",    7);
    this.Ab4 = new HealingHz.data.Note("GsharpAflat", 8);
    this.A4  = new HealingHz.data.Note("A",    9);
    this.Bb4 = new HealingHz.data.Note("AsharpBflat", 10);
    this.B4  = new HealingHz.data.Note("B",    11);

    this.C_major   = new HealingHz.data.Chord("C major",     [ this.C4,  this.E4,   this.G4  ]);
    this.Db_major  = new HealingHz.data.Chord("C#/Db major", [ this.Db4, this.F4,   this.Ab4 ]);
    this.D_major   = new HealingHz.data.Chord("D major",     [ this.D4,  this.Gb4,  this.A4  ]);
    this.Eb_major  = new HealingHz.data.Chord("D#/Eb major", [ this.Eb4, this.G4,   this.Bb4 ]);
    this.E_major   = new HealingHz.data.Chord("E major",     [ this.E4,  this.Ab4,  this.B4  ]);
    this.F_major   = new HealingHz.data.Chord("F major",     [ this.F4,  this.A4,   this.C4  ]);
    this.Gb_major  = new HealingHz.data.Chord("F#/Gb major", [ this.Gb4, this.Bb4,  this.Db4 ]);
    this.G_major   = new HealingHz.data.Chord("G major",     [ this.G4,  this.B4,   this.D4  ]);
    this.Ab_major  = new HealingHz.data.Chord("G#/Ab major", [ this.Ab4, this.C4,   this.Eb4 ]);
    this.A_major   = new HealingHz.data.Chord("A major",     [ this.A4,  this.Db4,  this.E4  ]);
    this.Bb_major  = new HealingHz.data.Chord("A#/Bb major", [ this.Bb4, this.D4,   this.F4  ]);
    this.B_major   = new HealingHz.data.Chord("B major",     [ this.B4,  this.Eb4,  this.Gb4 ]);

    this.C_major7   = new HealingHz.data.Chord("C major7",     [ this.C4,  this.E4,  this.G4,  this.B4 ]);
    this.Db_major7  = new HealingHz.data.Chord("C#/Db major7", [ this.Db4, this.F4,  this.Ab4, this.C4 ]);
    this.D_major7   = new HealingHz.data.Chord("D major7",     [ this.D4,  this.Gb4, this.A4,  this.Bb4]);
    this.Eb_major7  = new HealingHz.data.Chord("D#/Eb major7", [ this.Eb4, this.G4,  this.Bb4, this.D4 ]);
    this.E_major7   = new HealingHz.data.Chord("E major7",     [ this.E4,  this.Ab4, this.B4,  this.Eb4]);
    this.F_major7   = new HealingHz.data.Chord("F major7",     [ this.F4,  this.A4,  this.C4,  this.E4 ]);
    this.Gb_major7  = new HealingHz.data.Chord("F#/Gb major7", [ this.Gb4, this.Bb4, this.Db4, this.F4 ]);
    this.G_major7   = new HealingHz.data.Chord("G major7",     [ this.G4,  this.B4,  this.D4,  this.Gb4]);
    this.Ab_major7  = new HealingHz.data.Chord("G#/Ab major7", [ this.Ab4, this.C4,  this.Eb4, this.G4 ]);
    this.A_major7   = new HealingHz.data.Chord("A major7",     [ this.A4,  this.Db4, this.E4,  this.Ab4]);
    this.Bb_major7  = new HealingHz.data.Chord("A#/Bb major7", [ this.Bb4, this.D4,  this.F4,  this.A4 ]);
    this.B_major7   = new HealingHz.data.Chord("B major7",     [ this.B4,  this.Eb4, this.Gb4, this.Bb4]);
    
    this.C_minor   = new HealingHz.data.Chord("C minor",     [ this.C4,  this.Eb4, this.G4  ]);
    this.Db_minor  = new HealingHz.data.Chord("C#/Db minor", [ this.Db4, this.E4,  this.Ab4 ]);
    this.D_minor   = new HealingHz.data.Chord("D minor",     [ this.D4,  this.F4,  this.A4  ]);
    this.Eb_minor  = new HealingHz.data.Chord("D#/Eb minor", [ this.Eb4, this.Gb4, this.Bb4 ]);
    this.E_minor   = new HealingHz.data.Chord("E minor",     [ this.E4,  this.G4,  this.B4  ]);
    this.F_minor   = new HealingHz.data.Chord("F minor",     [ this.F4,  this.Ab4, this.C4  ]);
    this.Gb_minor  = new HealingHz.data.Chord("F#/Gb minor", [ this.Gb4, this.A4,  this.Db4 ]);
    this.G_minor   = new HealingHz.data.Chord("G minor",     [ this.G4,  this.Bb4, this.D4  ]);
    this.Ab_minor  = new HealingHz.data.Chord("G#/Ab minor", [ this.Ab4, this.B4,  this.Eb4 ]);
    this.A_minor   = new HealingHz.data.Chord("A minor",     [ this.A4,  this.C4,  this.E4  ]);
    this.Bb_minor  = new HealingHz.data.Chord("A#/Bb minor", [ this.Bb4, this.Db4, this.F4  ]);
    this.B_minor   = new HealingHz.data.Chord("B minor",     [ this.B4,  this.D4,  this.Gb4 ]);

    this.C_minor7  = new HealingHz.data.Chord("C minor7",     [ this.C4,  this.Eb4,   this.G4,   this.Bb4]);
    this.Db_minor7 = new HealingHz.data.Chord("C#/Db minor7", [ this.Db4, this.E4,    this.Ab4,  this.B4 ]);
    this.D_minor7  = new HealingHz.data.Chord("D minor7",     [ this.D4,  this.F4,    this.A4 ,  this.C4 ]);
    this.Eb_minor7 = new HealingHz.data.Chord("D#/Eb minor7", [ this.Eb4, this.Gb4,   this.Bb4,  this.Db4 ]);
    this.E_minor7  = new HealingHz.data.Chord("E minor7",     [ this.E4,  this.G4,    this.B4,   this.D4 ]);
    this.F_minor7  = new HealingHz.data.Chord("F minor7",     [ this.F4,  this.Ab4,   this.C4,   this.Eb4 ]);
    this.Gb_minor7 = new HealingHz.data.Chord("F#/Gb minor7", [ this.Gb4, this.A4,    this.Db4,  this.E4 ]);
    this.G_minor7  = new HealingHz.data.Chord("G minor7",     [ this.G4,  this.Bb4,   this.D4,   this.F4 ]);
    this.Ab_minor7 = new HealingHz.data.Chord("G#/Ab minor7", [ this.Ab4, this.B4,    this.Eb4,  this.Gb4]);
    this.A_minor7  = new HealingHz.data.Chord("A minor7",     [ this.A4,  this.C4,    this.E4,   this.G4 ]);
    this.Bb_minor7 = new HealingHz.data.Chord("A#/Bb minor7", [ this.Bb4, this.Db4,   this.F4,   this.Ab4]);
    this.B_minor7   = new HealingHz.data.Chord("B minor7",    [ this.B4,  this.D4,    this.Gb4,  this.A4 ]);

    this.C_chrom  = new HealingHz.data.Chord("C Chromatic scale",     [ this.C4,  this.Db4, this.D4,  this.Eb4, this.E4  ]);
    this.Db_chrom = new HealingHz.data.Chord("C#/Db Chromatic scale", [ this.Db4, this.D4,  this.Eb4, this.E4,  this.F4  ]);
    this.D_chrom  = new HealingHz.data.Chord("D Chromatic scale",     [ this.D4,  this.Eb4, this.E4,  this.F4,  this.Gb4 ]);
    this.Eb_chrom = new HealingHz.data.Chord("D#/Eb Chromatic scale", [ this.Eb4, this.E4,  this.F4,  this.Gb4, this.G4  ]);
    this.E_chrom  = new HealingHz.data.Chord("E Chromatic scale",     [ this.E4,  this.F4,  this.Gb4, this.G4,  this.Ab4 ]);
    this.F_chrom  = new HealingHz.data.Chord("F Chromatic scale",     [ this.F4,  this.Gb4, this.G4,  this.Ab4, this.A4  ]);
    this.Gb_chrom = new HealingHz.data.Chord("F#/Gb Chromatic scale", [ this.Gb4, this.G4,  this.Ab4, this.A4,  this.Bb4 ]);
    this.G_chrom  = new HealingHz.data.Chord("G Chromatic scale",     [ this.G4,  this.Ab4, this.A4,  this.Bb4, this.B4  ]);


    this.chords = [ this.C_major, this.Db_major, this.D_major, this.Eb_major, this.E_major, this.F_major, this.Gb_major, this.G_major, this.Ab_major, this.A_major, this.Bb_major, this.B_major,
                    this.C_major7, this.Db_major7, this.D_major7, this.Eb_major7, this.E_major7, this.F_major7, this.Gb_major7, this.G_major7, this.Ab_major7, this.A_major7, this.Bb_major7, this.B_major7, 
                    this.C_minor, this.Db_minor, this.D_minor, this.Eb_minor, this.E_minor, this.F_minor, this.Gb_minor, this.G_minor, this.Ab_minor, this.A_minor, this.Bb_minor, this.B_minor,
                    this.C_minor7, this.Db_minor7, this.D_minor7, this.Eb_minor7, this.E_minor7, this.F_minor7, this.Gb_minor7, this.G_minor7, this.Ab_minor7, this.A_minor7, this.Bb_minor7, this.B_minor7,
                    this.C_chrom, this.Db_chrom, this.D_chrom, this.Eb_chrom, this.E_chrom, this.F_chrom, this.Gb_chrom, this.G_chrom];

};

ns.ChordFactory.prototype.getChord = function() {
    return this.chords[Math.floor(Math.random() * this.chords.length)];
};
var ns = HealingHz.createNS("HealingHz.data");

ns.Note = function(name, index) {
    this.name = name;
    this.index = index;
};
var ns = HealingHz.createNS("HealingHz.model");

ns.NoteMarker = function(x, y, rad, color, borderColor, note) {
    this.circle = new createjs.Shape();
    this.circle.origx = x;
    this.circle.origy = y;
    this.circle.x = x;
    this.circle.y = y;
    this.circle.rad = rad;
    this.circle.color = color;
    this.circle.borderColor = borderColor;
    this.note = note;
};

ns.NoteMarker.prototype.draw = function(stage) {
    
    var c = this.circle;
    var thisNote = this.note;

    c.graphics
        .beginStroke(c.borderColor)
        .beginFill(c.color)
        .drawCircle(0, 0, c.rad);

    c.on("pressmove", 
        function(evt) {
            evt.target.x = evt.stageX;
            evt.target.y = evt.stageY;
            stage.update();
        });

    c.on("pressup", function(evt) { 
        var hits = 0;
        var fullBoxes = 0;

        createjs.Sound.play(thisNote.name);
        console.log(thisNote.name);
        
        for(boxi=0; boxi<HealingHz.markerBoxes.length; boxi++)
        {
            var markerBox = HealingHz.markerBoxes[boxi];
            var pt = evt.target.localToLocal(0, 0, markerBox.box);

            if(markerBox.box.hitTest(pt.x, pt.y)) {
               
               hits++;
               
               if(!markerBox.hasTooManyNoteMarkers()) {
                    evt.target.x = markerBox.box.x + (markerBox.w/2);
                    evt.target.y = markerBox.box.y + (markerBox.h/2);
               }
               else {
                   createjs.Tween.get(c, { loop: false })
                    .to({ alpha: 0 }, 50)
                    .to({ alpha: 1 }, 50)
                    .to({ alpha: 0 }, 50)
                    .to({ alpha: 1 }, 50)
                    .to({ x: evt.target.origx, y: evt.target.origy }, 1000, createjs.Ease.getPowInOut(4));
               }
            }
            
            if(markerBox.isFull()) {
                fullBoxes++;    
            }
        }
        
        if(hits === 0) {
           createjs.Tween.get(c, { loop: false })
            .to({ x: evt.target.origx, y: evt.target.origy }, 1000, createjs.Ease.getPowInOut(4));
        }

        createjs.Tween.get(c, { loop: false })
            .to({ alpha: 0 }, 250)
            .to({ alpha: 1 }, 500);
            
        createjs.Ticker.setFPS(60);
        createjs.Ticker.addEventListener("tick", stage);

        if(fullBoxes == HealingHz.markerBoxes.length) {
            HealingHz.checkNoteOrder();
        }
        
        // Find the clicked NoteMarker
        for(i=0; i< HealingHz.noteMarkers.length; i++)
        {
            var n = HealingHz.noteMarkers[i];
        }
    });

    stage.addChild(c);
};
var ns = HealingHz.createNS("HealingHz.model");

ns.NoteMarkerBox = function(x, y, color, borderColor) {

    this.box = new createjs.Shape();
    this.box.x = x;
    this.box.y = y;
    this.w = 100;
    this.h = 100;
    this.color = color;
    this.borderColor = borderColor;
};

ns.NoteMarkerBox.prototype.draw = function(stage) {

    var b = this.box;
    
    b.graphics
        .beginStroke(this.borderColor)
        .beginFill(this.color)
        .drawRect(0, 0, this.w, this.h);

    stage.addChildAt(b, 0);
    stage.update();
};

ns.NoteMarkerBox.prototype.hasTooManyNoteMarkers = function() {

    var hits = 0;

    for(i=0; i<HealingHz.noteMarkers.length; i++) {

        var pt = HealingHz.noteMarkers[i].circle.localToLocal(0, 0, this.box);

        if(this.box.hitTest(pt.x, pt.y)) {
            hits++;
        }
    }

    return hits > 1;
};


ns.NoteMarkerBox.prototype.isFull = function() {

    var hits = 0;

    for(i=0; i<HealingHz.noteMarkers.length; i++) {

        var pt = HealingHz.noteMarkers[i].circle.localToLocal(0, 0, this.box);

        if(this.box.hitTest(pt.x, pt.y)) {
            hits++;
        }
    }

    return hits > 0;
};


ns.NoteMarkerBox.prototype.getNote = function() {
    
    var ret;
    
    for(i=0; i<HealingHz.noteMarkers.length; i++) {

        var pt = HealingHz.noteMarkers[i].circle.localToLocal(0, 0, this.box);

        if(this.box.hitTest(pt.x, pt.y)) {
            ret = HealingHz.noteMarkers[i].note;
        }
    }

    return ret;
};
var ns = HealingHz.createNS("HealingHz.model");


ns.NoteMarkerFactory = function() {
};
ns.NoteMarkerFactory.prototype.generateColorCode = function() {
    return Math.floor(Math.random()*16777215);
};

ns.NoteMarkerFactory.prototype.randomizeNotes = function(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
};

ns.NoteMarkerFactory.prototype.buildNoteMarkers = function(chord) {

    var noteMarkers = [];
    var notes = chord.getNotes();
    
    this.randomizeNotes(notes);

    for(i=0; i<notes.length; i++)
    {
        var color = this.generateColorCode();

        var xindex = (690+(10*i))/HealingHz.NUM_MARKERS + (110*i) + 50;
        var nm = new HealingHz.model.NoteMarker(xindex, 200, 40, '#'+color.toString(16), "black", notes[i]);
        noteMarkers.push(nm);
    }

    return noteMarkers;
};